
1602CLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00000514  000005a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000514  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080019a  0080019a  00000642  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000642  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000674  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000162f  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c8c  00000000  00000000  00001df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009cc  00000000  00000000  00002a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  0000344c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000651  00000000  00000000  00003718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c44  00000000  00000000  00003d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000049ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	cd c1       	rjmp	.+922    	; 0x3e4 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e1       	ldi	r30, 0x14	; 20
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 39       	cpi	r26, 0x9A	; 154
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e9       	ldi	r26, 0x9A	; 154
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 3a       	cpi	r26, 0xA4	; 164
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	49 d1       	rcall	.+658    	; 0x356 <main>
  c4:	25 c2       	rjmp	.+1098   	; 0x510 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <i2c_lcd_command_8>:
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <i2c_lcd_command_8+0x6>
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	80 7f       	andi	r24, 0xF0	; 240
  d4:	98 2f       	mov	r25, r24
  d6:	9c 60       	ori	r25, 0x0C	; 12
  d8:	99 83       	std	Y+1, r25	; 0x01
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	8a 83       	std	Y+2, r24	; 0x02
  de:	42 e0       	ldi	r20, 0x02	; 2
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	be 01       	movw	r22, r28
  e4:	6f 5f       	subi	r22, 0xFF	; 255
  e6:	7f 4f       	sbci	r23, 0xFF	; 255
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	03 d1       	rcall	.+518    	; 0x2f4 <i2c_transmit>
  ee:	81 11       	cpse	r24, r1
  f0:	f6 cf       	rjmp	.-20     	; 0xde <i2c_lcd_command_8+0x16>
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <i2c_lcd_command>:
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <i2c_lcd_command+0x6>
 102:	00 d0       	rcall	.+0      	; 0x104 <i2c_lcd_command+0x8>
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	98 2f       	mov	r25, r24
 10a:	90 7f       	andi	r25, 0xF0	; 240
 10c:	29 2f       	mov	r18, r25
 10e:	2c 60       	ori	r18, 0x0C	; 12
 110:	29 83       	std	Y+1, r18	; 0x01
 112:	98 60       	ori	r25, 0x08	; 8
 114:	9a 83       	std	Y+2, r25	; 0x02
 116:	20 e1       	ldi	r18, 0x10	; 16
 118:	82 9f       	mul	r24, r18
 11a:	c0 01       	movw	r24, r0
 11c:	11 24       	eor	r1, r1
 11e:	98 2f       	mov	r25, r24
 120:	9c 60       	ori	r25, 0x0C	; 12
 122:	9b 83       	std	Y+3, r25	; 0x03
 124:	88 60       	ori	r24, 0x08	; 8
 126:	8c 83       	std	Y+4, r24	; 0x04
 128:	44 e0       	ldi	r20, 0x04	; 4
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	be 01       	movw	r22, r28
 12e:	6f 5f       	subi	r22, 0xFF	; 255
 130:	7f 4f       	sbci	r23, 0xFF	; 255
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 136:	de d0       	rcall	.+444    	; 0x2f4 <i2c_transmit>
 138:	81 11       	cpse	r24, r1
 13a:	f6 cf       	rjmp	.-20     	; 0x128 <i2c_lcd_command+0x2c>
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <i2c_lcd_init>:
 14a:	94 d0       	rcall	.+296    	; 0x274 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	89 e6       	ldi	r24, 0x69	; 105
 150:	98 e1       	ldi	r25, 0x18	; 24
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <i2c_lcd_init+0x8>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <i2c_lcd_init+0x12>
 15c:	00 00       	nop
 15e:	8d e3       	ldi	r24, 0x3D	; 61
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	a6 d1       	rcall	.+844    	; 0x4b0 <puts>
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	b0 df       	rcall	.-160    	; 0xc8 <i2c_lcd_command_8>
 168:	8f e1       	ldi	r24, 0x1F	; 31
 16a:	9e e4       	ldi	r25, 0x4E	; 78
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <i2c_lcd_init+0x22>
 170:	00 c0       	rjmp	.+0      	; 0x172 <i2c_lcd_init+0x28>
 172:	00 00       	nop
 174:	80 e3       	ldi	r24, 0x30	; 48
 176:	a8 df       	rcall	.-176    	; 0xc8 <i2c_lcd_command_8>
 178:	8f e8       	ldi	r24, 0x8F	; 143
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <i2c_lcd_init+0x32>
 180:	00 c0       	rjmp	.+0      	; 0x182 <i2c_lcd_init+0x38>
 182:	00 00       	nop
 184:	80 e3       	ldi	r24, 0x30	; 48
 186:	a0 df       	rcall	.-192    	; 0xc8 <i2c_lcd_command_8>
 188:	8f e8       	ldi	r24, 0x8F	; 143
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <i2c_lcd_init+0x42>
 190:	00 c0       	rjmp	.+0      	; 0x192 <i2c_lcd_init+0x48>
 192:	00 00       	nop
 194:	80 e2       	ldi	r24, 0x20	; 32
 196:	98 df       	rcall	.-208    	; 0xc8 <i2c_lcd_command_8>
 198:	8f e8       	ldi	r24, 0x8F	; 143
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <i2c_lcd_init+0x52>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <i2c_lcd_init+0x58>
 1a2:	00 00       	nop
 1a4:	88 e2       	ldi	r24, 0x28	; 40
 1a6:	aa df       	rcall	.-172    	; 0xfc <i2c_lcd_command>
 1a8:	87 ec       	ldi	r24, 0xC7	; 199
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <i2c_lcd_init+0x62>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <i2c_lcd_init+0x68>
 1b2:	00 00       	nop
 1b4:	88 e0       	ldi	r24, 0x08	; 8
 1b6:	a2 df       	rcall	.-188    	; 0xfc <i2c_lcd_command>
 1b8:	87 ec       	ldi	r24, 0xC7	; 199
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <i2c_lcd_init+0x72>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <i2c_lcd_init+0x78>
 1c2:	00 00       	nop
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	9a df       	rcall	.-204    	; 0xfc <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	8f ed       	ldi	r24, 0xDF	; 223
 1ca:	9e e2       	ldi	r25, 0x2E	; 46
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <i2c_lcd_init+0x82>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <i2c_lcd_init+0x88>
 1d2:	00 00       	nop
 1d4:	86 e0       	ldi	r24, 0x06	; 6
 1d6:	92 df       	rcall	.-220    	; 0xfc <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	87 ec       	ldi	r24, 0xC7	; 199
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <i2c_lcd_init+0x92>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <i2c_lcd_init+0x98>
 1e2:	00 00       	nop
 1e4:	8c e0       	ldi	r24, 0x0C	; 12
 1e6:	8a df       	rcall	.-236    	; 0xfc <i2c_lcd_command>
 1e8:	87 ec       	ldi	r24, 0xC7	; 199
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <i2c_lcd_init+0xa2>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <i2c_lcd_init+0xa8>
 1f2:	00 00       	nop
 1f4:	84 e5       	ldi	r24, 0x54	; 84
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	5b c1       	rjmp	.+694    	; 0x4b0 <puts>
 1fa:	08 95       	ret

000001fc <i2c_lcd_data>:
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	00 d0       	rcall	.+0      	; 0x202 <i2c_lcd_data+0x6>
 202:	00 d0       	rcall	.+0      	; 0x204 <i2c_lcd_data+0x8>
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	98 2f       	mov	r25, r24
 20a:	90 7f       	andi	r25, 0xF0	; 240
 20c:	29 2f       	mov	r18, r25
 20e:	2d 60       	ori	r18, 0x0D	; 13
 210:	29 83       	std	Y+1, r18	; 0x01
 212:	99 60       	ori	r25, 0x09	; 9
 214:	9a 83       	std	Y+2, r25	; 0x02
 216:	20 e1       	ldi	r18, 0x10	; 16
 218:	82 9f       	mul	r24, r18
 21a:	c0 01       	movw	r24, r0
 21c:	11 24       	eor	r1, r1
 21e:	98 2f       	mov	r25, r24
 220:	9d 60       	ori	r25, 0x0D	; 13
 222:	9b 83       	std	Y+3, r25	; 0x03
 224:	89 60       	ori	r24, 0x09	; 9
 226:	8c 83       	std	Y+4, r24	; 0x04
 228:	44 e0       	ldi	r20, 0x04	; 4
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	be 01       	movw	r22, r28
 22e:	6f 5f       	subi	r22, 0xFF	; 255
 230:	7f 4f       	sbci	r23, 0xFF	; 255
 232:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 236:	5e d0       	rcall	.+188    	; 0x2f4 <i2c_transmit>
 238:	81 11       	cpse	r24, r1
 23a:	f6 cf       	rjmp	.-20     	; 0x228 <i2c_lcd_data+0x2c>
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <i2c_lcd_goto_XY>:
 24a:	90 e4       	ldi	r25, 0x40	; 64
 24c:	89 9f       	mul	r24, r25
 24e:	60 0d       	add	r22, r0
 250:	11 24       	eor	r1, r1
 252:	86 2f       	mov	r24, r22
 254:	80 68       	ori	r24, 0x80	; 128
 256:	52 cf       	rjmp	.-348    	; 0xfc <i2c_lcd_command>
 258:	08 95       	ret

0000025a <i2c_lcd_string>:
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ea 01       	movw	r28, r20
 260:	f4 df       	rcall	.-24     	; 0x24a <i2c_lcd_goto_XY>
 262:	02 c0       	rjmp	.+4      	; 0x268 <i2c_lcd_string+0xe>
 264:	21 96       	adiw	r28, 0x01	; 1
 266:	ca df       	rcall	.-108    	; 0x1fc <i2c_lcd_data>
 268:	88 81       	ld	r24, Y
 26a:	81 11       	cpse	r24, r1
 26c:	fb cf       	rjmp	.-10     	; 0x264 <i2c_lcd_string+0xa>
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <i2c_init>:
 274:	88 e4       	ldi	r24, 0x48	; 72
 276:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 27a:	08 95       	ret

0000027c <i2c_start>:
 27c:	e4 e7       	ldi	r30, 0x74	; 116
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	10 82       	st	Z, r1
 282:	94 ea       	ldi	r25, 0xA4	; 164
 284:	90 83       	st	Z, r25
 286:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 28a:	99 23       	and	r25, r25
 28c:	e4 f7       	brge	.-8      	; 0x286 <i2c_start+0xa>
 28e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 292:	98 7f       	andi	r25, 0xF8	; 248
 294:	98 30       	cpi	r25, 0x08	; 8
 296:	91 f4       	brne	.+36     	; 0x2bc <i2c_start+0x40>
 298:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 29c:	84 e8       	ldi	r24, 0x84	; 132
 29e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2a2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2a6:	88 23       	and	r24, r24
 2a8:	e4 f7       	brge	.-8      	; 0x2a2 <i2c_start+0x26>
 2aa:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 2ae:	88 7f       	andi	r24, 0xF8	; 248
 2b0:	88 31       	cpi	r24, 0x18	; 24
 2b2:	31 f0       	breq	.+12     	; 0x2c0 <i2c_start+0x44>
 2b4:	80 34       	cpi	r24, 0x40	; 64
 2b6:	31 f4       	brne	.+12     	; 0x2c4 <i2c_start+0x48>
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	08 95       	ret
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	08 95       	ret
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	08 95       	ret
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	08 95       	ret

000002c8 <i2c_write>:
 2c8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 2cc:	84 e8       	ldi	r24, 0x84	; 132
 2ce:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2d2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2d6:	88 23       	and	r24, r24
 2d8:	e4 f7       	brge	.-8      	; 0x2d2 <i2c_write+0xa>
 2da:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 2de:	88 7f       	andi	r24, 0xF8	; 248
 2e0:	88 32       	cpi	r24, 0x28	; 40
 2e2:	11 f0       	breq	.+4      	; 0x2e8 <i2c_write+0x20>
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	08 95       	ret
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	08 95       	ret

000002ec <i2c_stop>:
 2ec:	84 e9       	ldi	r24, 0x94	; 148
 2ee:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2f2:	08 95       	ret

000002f4 <i2c_transmit>:
 2f4:	df 92       	push	r13
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	7b 01       	movw	r14, r22
 304:	8a 01       	movw	r16, r20
 306:	ba df       	rcall	.-140    	; 0x27c <i2c_start>
 308:	d8 2e       	mov	r13, r24
 30a:	81 11       	cpse	r24, r1
 30c:	16 c0       	rjmp	.+44     	; 0x33a <i2c_transmit+0x46>
 30e:	c0 e0       	ldi	r28, 0x00	; 0
 310:	d0 e0       	ldi	r29, 0x00	; 0
 312:	0e c0       	rjmp	.+28     	; 0x330 <i2c_transmit+0x3c>
 314:	f7 01       	movw	r30, r14
 316:	ec 0f       	add	r30, r28
 318:	fd 1f       	adc	r31, r29
 31a:	80 81       	ld	r24, Z
 31c:	d5 df       	rcall	.-86     	; 0x2c8 <i2c_write>
 31e:	81 11       	cpse	r24, r1
 320:	0f c0       	rjmp	.+30     	; 0x340 <i2c_transmit+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 322:	8f e9       	ldi	r24, 0x9F	; 159
 324:	9f e0       	ldi	r25, 0x0F	; 15
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <i2c_transmit+0x32>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <i2c_transmit+0x38>
 32c:	00 00       	nop
 32e:	21 96       	adiw	r28, 0x01	; 1
 330:	c0 17       	cp	r28, r16
 332:	d1 07       	cpc	r29, r17
 334:	78 f3       	brcs	.-34     	; 0x314 <i2c_transmit+0x20>
 336:	da df       	rcall	.-76     	; 0x2ec <i2c_stop>
 338:	05 c0       	rjmp	.+10     	; 0x344 <i2c_transmit+0x50>
 33a:	dd 24       	eor	r13, r13
 33c:	d3 94       	inc	r13
 33e:	02 c0       	rjmp	.+4      	; 0x344 <i2c_transmit+0x50>
 340:	dd 24       	eor	r13, r13
 342:	d3 94       	inc	r13
 344:	8d 2d       	mov	r24, r13
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	ff 90       	pop	r15
 350:	ef 90       	pop	r14
 352:	df 90       	pop	r13
 354:	08 95       	ret

00000356 <main>:
#include <avr/io.h>
#include "clcd.h"
#include "uart.h"

int main(void)
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	a0 97       	sbiw	r28, 0x20	; 32
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	f8 94       	cli
 364:	de bf       	out	0x3e, r29	; 62
 366:	0f be       	out	0x3f, r0	; 63
 368:	cd bf       	out	0x3d, r28	; 61
	uart0_init();
 36a:	88 d0       	rcall	.+272    	; 0x47c <uart0_init>
	i2c_lcd_init();
 36c:	ee de       	rcall	.-548    	; 0x14a <i2c_lcd_init>
 36e:	8d e0       	ldi	r24, 0x0D	; 13
	
	char str0[16] = "Hello World!";
 370:	ed e1       	ldi	r30, 0x1D	; 29
 372:	f1 e0       	ldi	r31, 0x01	; 1
 374:	de 01       	movw	r26, r28
 376:	11 96       	adiw	r26, 0x01	; 1
 378:	01 90       	ld	r0, Z+
 37a:	0d 92       	st	X+, r0
 37c:	8a 95       	dec	r24
 37e:	e1 f7       	brne	.-8      	; 0x378 <main+0x22>
 380:	fe 01       	movw	r30, r28
 382:	3e 96       	adiw	r30, 0x0e	; 14
 384:	83 e0       	ldi	r24, 0x03	; 3
 386:	df 01       	movw	r26, r30
 388:	1d 92       	st	X+, r1
 38a:	8a 95       	dec	r24
 38c:	e9 f7       	brne	.-6      	; 0x388 <main+0x32>
 38e:	8a e0       	ldi	r24, 0x0A	; 10
	char str1[16] = "ATmega128";
 390:	ed e2       	ldi	r30, 0x2D	; 45
 392:	f1 e0       	ldi	r31, 0x01	; 1
 394:	de 01       	movw	r26, r28
 396:	51 96       	adiw	r26, 0x11	; 17
 398:	01 90       	ld	r0, Z+
 39a:	0d 92       	st	X+, r0
 39c:	8a 95       	dec	r24
 39e:	e1 f7       	brne	.-8      	; 0x398 <main+0x42>
 3a0:	fe 01       	movw	r30, r28
 3a2:	7b 96       	adiw	r30, 0x1b	; 27
 3a4:	86 e0       	ldi	r24, 0x06	; 6
 3a6:	df 01       	movw	r26, r30
 3a8:	1d 92       	st	X+, r1
 3aa:	8a 95       	dec	r24
 3ac:	e9 f7       	brne	.-6      	; 0x3a8 <main+0x52>
 3ae:	80 e6       	ldi	r24, 0x60	; 96
	
	printf("Before string transfer....\r\n");
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	7e d0       	rcall	.+252    	; 0x4b0 <puts>
 3b4:	ae 01       	movw	r20, r28
	i2c_lcd_string(0, 0, str0);
 3b6:	4f 5f       	subi	r20, 0xFF	; 255
 3b8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	4d df       	rcall	.-358    	; 0x25a <i2c_lcd_string>
 3c0:	ae 01       	movw	r20, r28
	i2c_lcd_string(1, 0, str1);
 3c2:	4f 5e       	subi	r20, 0xEF	; 239
 3c4:	5f 4f       	sbci	r21, 0xFF	; 255
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	47 df       	rcall	.-370    	; 0x25a <i2c_lcd_string>
	printf("string transfer complete....\r\n");	
 3cc:	8c e7       	ldi	r24, 0x7C	; 124
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	6f d0       	rcall	.+222    	; 0x4b0 <puts>
 3d2:	ff cf       	rjmp	.-2      	; 0x3d2 <main+0x7c>

000003d4 <uart0_trasnmit>:
 3d4:	5d 9b       	sbis	0x0b, 5	; 11
 3d6:	fe cf       	rjmp	.-4      	; 0x3d4 <uart0_trasnmit>
 3d8:	8c b9       	out	0x0c, r24	; 12
 3da:	08 95       	ret

000003dc <uart0_receive>:
 3dc:	5f 9b       	sbis	0x0b, 7	; 11
 3de:	fe cf       	rjmp	.-4      	; 0x3dc <uart0_receive>
 3e0:	8c b1       	in	r24, 0x0c	; 12
 3e2:	08 95       	ret

000003e4 <__vector_18>:
 3e4:	1f 92       	push	r1
 3e6:	0f 92       	push	r0
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	0f 92       	push	r0
 3ec:	11 24       	eor	r1, r1
 3ee:	2f 93       	push	r18
 3f0:	3f 93       	push	r19
 3f2:	4f 93       	push	r20
 3f4:	5f 93       	push	r21
 3f6:	8f 93       	push	r24
 3f8:	9f 93       	push	r25
 3fa:	8c b1       	in	r24, 0x0c	; 12
 3fc:	90 ed       	ldi	r25, 0xD0	; 208
 3fe:	98 0f       	add	r25, r24
 400:	9a 30       	cpi	r25, 0x0A	; 10
 402:	58 f5       	brcc	.+86     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 404:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <__data_end>
 408:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <__data_end+0x1>
 40c:	23 2b       	or	r18, r19
 40e:	c1 f0       	breq	.+48     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 410:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <rxdata>
 414:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <rxdata+0x1>
 418:	a9 01       	movw	r20, r18
 41a:	44 0f       	add	r20, r20
 41c:	55 1f       	adc	r21, r21
 41e:	22 0f       	add	r18, r18
 420:	33 1f       	adc	r19, r19
 422:	22 0f       	add	r18, r18
 424:	33 1f       	adc	r19, r19
 426:	22 0f       	add	r18, r18
 428:	33 1f       	adc	r19, r19
 42a:	24 0f       	add	r18, r20
 42c:	35 1f       	adc	r19, r21
 42e:	28 0f       	add	r18, r24
 430:	31 1d       	adc	r19, r1
 432:	20 53       	subi	r18, 0x30	; 48
 434:	31 09       	sbc	r19, r1
 436:	30 93 9d 01 	sts	0x019D, r19	; 0x80019d <rxdata+0x1>
 43a:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <rxdata>
 43e:	13 c0       	rjmp	.+38     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	c0 97       	sbiw	r24, 0x30	; 48
 444:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <rxdata+0x1>
 448:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <rxdata>
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <__data_end+0x1>
 454:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>
 458:	06 c0       	rjmp	.+12     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 45a:	8d 30       	cpi	r24, 0x0D	; 13
 45c:	21 f4       	brne	.+8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 45e:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <__data_end+0x1>
 462:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <__data_end>
 466:	9f 91       	pop	r25
 468:	8f 91       	pop	r24
 46a:	5f 91       	pop	r21
 46c:	4f 91       	pop	r20
 46e:	3f 91       	pop	r19
 470:	2f 91       	pop	r18
 472:	0f 90       	pop	r0
 474:	0f be       	out	0x3f, r0	; 63
 476:	0f 90       	pop	r0
 478:	1f 90       	pop	r1
 47a:	18 95       	reti

0000047c <uart0_init>:
 47c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 480:	80 e1       	ldi	r24, 0x10	; 16
 482:	89 b9       	out	0x09, r24	; 9
 484:	8b b1       	in	r24, 0x0b	; 11
 486:	82 60       	ori	r24, 0x02	; 2
 488:	8b b9       	out	0x0b, r24	; 11
 48a:	e5 e9       	ldi	r30, 0x95	; 149
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	86 60       	ori	r24, 0x06	; 6
 492:	80 83       	st	Z, r24
 494:	8a b1       	in	r24, 0x0a	; 10
 496:	88 61       	ori	r24, 0x18	; 24
 498:	8a b9       	out	0x0a, r24	; 10
 49a:	ee e9       	ldi	r30, 0x9E	; 158
 49c:	f1 e0       	ldi	r31, 0x01	; 1
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	91 83       	std	Z+1, r25	; 0x01
 4a4:	80 83       	st	Z, r24
 4a6:	8f e0       	ldi	r24, 0x0F	; 15
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	93 83       	std	Z+3, r25	; 0x03
 4ac:	82 83       	std	Z+2, r24	; 0x02
 4ae:	08 95       	ret

000004b0 <puts>:
 4b0:	0f 93       	push	r16
 4b2:	1f 93       	push	r17
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <__iob+0x2>
 4bc:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <__iob+0x3>
 4c0:	23 81       	ldd	r18, Z+3	; 0x03
 4c2:	21 ff       	sbrs	r18, 1
 4c4:	1b c0       	rjmp	.+54     	; 0x4fc <puts+0x4c>
 4c6:	8c 01       	movw	r16, r24
 4c8:	d0 e0       	ldi	r29, 0x00	; 0
 4ca:	c0 e0       	ldi	r28, 0x00	; 0
 4cc:	f8 01       	movw	r30, r16
 4ce:	81 91       	ld	r24, Z+
 4d0:	8f 01       	movw	r16, r30
 4d2:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <__iob+0x2>
 4d6:	70 91 a1 01 	lds	r23, 0x01A1	; 0x8001a1 <__iob+0x3>
 4da:	db 01       	movw	r26, r22
 4dc:	18 96       	adiw	r26, 0x08	; 8
 4de:	ed 91       	ld	r30, X+
 4e0:	fc 91       	ld	r31, X
 4e2:	19 97       	sbiw	r26, 0x09	; 9
 4e4:	88 23       	and	r24, r24
 4e6:	31 f0       	breq	.+12     	; 0x4f4 <puts+0x44>
 4e8:	09 95       	icall
 4ea:	89 2b       	or	r24, r25
 4ec:	79 f3       	breq	.-34     	; 0x4cc <puts+0x1c>
 4ee:	df ef       	ldi	r29, 0xFF	; 255
 4f0:	cf ef       	ldi	r28, 0xFF	; 255
 4f2:	ec cf       	rjmp	.-40     	; 0x4cc <puts+0x1c>
 4f4:	8a e0       	ldi	r24, 0x0A	; 10
 4f6:	09 95       	icall
 4f8:	89 2b       	or	r24, r25
 4fa:	19 f0       	breq	.+6      	; 0x502 <puts+0x52>
 4fc:	8f ef       	ldi	r24, 0xFF	; 255
 4fe:	9f ef       	ldi	r25, 0xFF	; 255
 500:	02 c0       	rjmp	.+4      	; 0x506 <puts+0x56>
 502:	8d 2f       	mov	r24, r29
 504:	9c 2f       	mov	r25, r28
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	1f 91       	pop	r17
 50c:	0f 91       	pop	r16
 50e:	08 95       	ret

00000510 <_exit>:
 510:	f8 94       	cli

00000512 <__stop_program>:
 512:	ff cf       	rjmp	.-2      	; 0x512 <__stop_program>
