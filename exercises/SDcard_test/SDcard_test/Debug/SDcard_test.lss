
SDcard_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000272  00800100  000006c6  0000073a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ea4  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b27  00000000  00000000  000029e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e16  00000000  00000000  00003507  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c4  00000000  00000000  00004320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000661  00000000  00000000  000046e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001019  00000000  00000000  00004d45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  00005d5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	13 e0       	ldi	r17, 0x03	; 3
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ec       	ldi	r30, 0xC6	; 198
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 37       	cpi	r26, 0x72	; 114
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	11 d2       	rcall	.+1058   	; 0x4d6 <main>
  b4:	06 c3       	rjmp	.+1548   	; 0x6c2 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <spiInit>:
	if(VDD_3233(res[2])) uartPuts("3.2-3.3, ");
	if(VDD_3334(res[2])) uartPuts("3.3-3.4, ");
	if(VDD_3435(res[2])) uartPuts("3.4-3.5, ");
	if(VDD_3536(res[2])) uartPuts("3.5-3.6");
	uartPuts("\n");
}
  b8:	87 b3       	in	r24, 0x17	; 23
  ba:	87 60       	ori	r24, 0x07	; 7
  bc:	87 bb       	out	0x17, r24	; 23
  be:	87 b3       	in	r24, 0x17	; 23
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	87 bb       	out	0x17, r24	; 23
  c4:	83 e5       	ldi	r24, 0x53	; 83
  c6:	8d b9       	out	0x0d, r24	; 13
  c8:	08 95       	ret

000000ca <spiTransfer>:
  ca:	8f b9       	out	0x0f, r24	; 15
  cc:	77 9b       	sbis	0x0e, 7	; 14
  ce:	fe cf       	rjmp	.-4      	; 0xcc <spiTransfer+0x2>
  d0:	8f b1       	in	r24, 0x0f	; 15
  d2:	08 95       	ret

000000d4 <sdPowerUpSeq>:
  d4:	cf 93       	push	r28
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	8e 7f       	andi	r24, 0xFE	; 254
  da:	88 bb       	out	0x18, r24	; 24
  dc:	8f e9       	ldi	r24, 0x9F	; 159
  de:	9f e0       	ldi	r25, 0x0F	; 15
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <sdPowerUpSeq+0xc>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <sdPowerUpSeq+0x12>
  e6:	00 00       	nop
  e8:	c0 e0       	ldi	r28, 0x00	; 0
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <sdPowerUpSeq+0x1e>
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	ed df       	rcall	.-38     	; 0xca <spiTransfer>
  f0:	cf 5f       	subi	r28, 0xFF	; 255
  f2:	ca 30       	cpi	r28, 0x0A	; 10
  f4:	d8 f3       	brcs	.-10     	; 0xec <sdPowerUpSeq+0x18>
  f6:	88 b3       	in	r24, 0x18	; 24
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	88 bb       	out	0x18, r24	; 24
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	e5 df       	rcall	.-54     	; 0xca <spiTransfer>
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <sdCommand>:
 104:	ff 92       	push	r15
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	d4 2f       	mov	r29, r20
 110:	15 2f       	mov	r17, r21
 112:	06 2f       	mov	r16, r22
 114:	f7 2e       	mov	r15, r23
 116:	c2 2f       	mov	r28, r18
 118:	80 64       	ori	r24, 0x40	; 64
 11a:	d7 df       	rcall	.-82     	; 0xca <spiTransfer>
 11c:	8f 2d       	mov	r24, r15
 11e:	d5 df       	rcall	.-86     	; 0xca <spiTransfer>
 120:	80 2f       	mov	r24, r16
 122:	d3 df       	rcall	.-90     	; 0xca <spiTransfer>
 124:	81 2f       	mov	r24, r17
 126:	d1 df       	rcall	.-94     	; 0xca <spiTransfer>
 128:	8d 2f       	mov	r24, r29
 12a:	cf df       	rcall	.-98     	; 0xca <spiTransfer>
 12c:	8c 2f       	mov	r24, r28
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	cc df       	rcall	.-104    	; 0xca <spiTransfer>
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	ff 90       	pop	r15
 13c:	08 95       	ret

0000013e <sdReadRes1>:
 13e:	cf 93       	push	r28
 140:	c0 e0       	ldi	r28, 0x00	; 0
 142:	03 c0       	rjmp	.+6      	; 0x14a <sdReadRes1+0xc>
 144:	cf 5f       	subi	r28, 0xFF	; 255
 146:	c9 30       	cpi	r28, 0x09	; 9
 148:	20 f4       	brcc	.+8      	; 0x152 <sdReadRes1+0x14>
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	be df       	rcall	.-132    	; 0xca <spiTransfer>
 14e:	8f 3f       	cpi	r24, 0xFF	; 255
 150:	c9 f3       	breq	.-14     	; 0x144 <sdReadRes1+0x6>
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <sdGoIdleState>:
 156:	cf 93       	push	r28
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	b7 df       	rcall	.-146    	; 0xca <spiTransfer>
 15c:	88 b3       	in	r24, 0x18	; 24
 15e:	8e 7f       	andi	r24, 0xFE	; 254
 160:	88 bb       	out	0x18, r24	; 24
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	b2 df       	rcall	.-156    	; 0xca <spiTransfer>
 166:	24 e9       	ldi	r18, 0x94	; 148
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	ba 01       	movw	r22, r20
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	c9 df       	rcall	.-110    	; 0x104 <sdCommand>
 172:	e5 df       	rcall	.-54     	; 0x13e <sdReadRes1>
 174:	c8 2f       	mov	r28, r24
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	a8 df       	rcall	.-176    	; 0xca <spiTransfer>
 17a:	88 b3       	in	r24, 0x18	; 24
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	88 bb       	out	0x18, r24	; 24
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	a3 df       	rcall	.-186    	; 0xca <spiTransfer>
 184:	8c 2f       	mov	r24, r28
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <sdReadRes3Res7>:
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	ec 01       	movw	r28, r24
 190:	d6 df       	rcall	.-84     	; 0x13e <sdReadRes1>
 192:	88 83       	st	Y, r24
 194:	82 30       	cpi	r24, 0x02	; 2
 196:	60 f4       	brcc	.+24     	; 0x1b0 <sdReadRes3Res7+0x26>
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	97 df       	rcall	.-210    	; 0xca <spiTransfer>
 19c:	89 83       	std	Y+1, r24	; 0x01
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	94 df       	rcall	.-216    	; 0xca <spiTransfer>
 1a2:	8a 83       	std	Y+2, r24	; 0x02
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	91 df       	rcall	.-222    	; 0xca <spiTransfer>
 1a8:	8b 83       	std	Y+3, r24	; 0x03
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	8e df       	rcall	.-228    	; 0xca <spiTransfer>
 1ae:	8c 83       	std	Y+4, r24	; 0x04
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <sdSendIfCond>:
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	ec 01       	movw	r28, r24
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	85 df       	rcall	.-246    	; 0xca <spiTransfer>
 1c0:	88 b3       	in	r24, 0x18	; 24
 1c2:	8e 7f       	andi	r24, 0xFE	; 254
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	80 df       	rcall	.-256    	; 0xca <spiTransfer>
 1ca:	26 e8       	ldi	r18, 0x86	; 134
 1cc:	4a ea       	ldi	r20, 0xAA	; 170
 1ce:	51 e0       	ldi	r21, 0x01	; 1
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	88 e0       	ldi	r24, 0x08	; 8
 1d6:	96 df       	rcall	.-212    	; 0x104 <sdCommand>
 1d8:	ce 01       	movw	r24, r28
 1da:	d7 df       	rcall	.-82     	; 0x18a <sdReadRes3Res7>
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	75 df       	rcall	.-278    	; 0xca <spiTransfer>
 1e0:	88 b3       	in	r24, 0x18	; 24
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	88 bb       	out	0x18, r24	; 24
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	70 df       	rcall	.-288    	; 0xca <spiTransfer>
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <sdReadOcr>:
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ec 01       	movw	r28, r24
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	68 df       	rcall	.-304    	; 0xca <spiTransfer>
 1fa:	88 b3       	in	r24, 0x18	; 24
 1fc:	8e 7f       	andi	r24, 0xFE	; 254
 1fe:	88 bb       	out	0x18, r24	; 24
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	63 df       	rcall	.-314    	; 0xca <spiTransfer>
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	ba 01       	movw	r22, r20
 20c:	8a e3       	ldi	r24, 0x3A	; 58
 20e:	7a df       	rcall	.-268    	; 0x104 <sdCommand>
 210:	ce 01       	movw	r24, r28
 212:	bb df       	rcall	.-138    	; 0x18a <sdReadRes3Res7>
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	59 df       	rcall	.-334    	; 0xca <spiTransfer>
 218:	88 b3       	in	r24, 0x18	; 24
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	88 bb       	out	0x18, r24	; 24
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	54 df       	rcall	.-344    	; 0xca <spiTransfer>
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <sdSendApp>:
 228:	cf 93       	push	r28
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	4e df       	rcall	.-356    	; 0xca <spiTransfer>
 22e:	88 b3       	in	r24, 0x18	; 24
 230:	8e 7f       	andi	r24, 0xFE	; 254
 232:	88 bb       	out	0x18, r24	; 24
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	49 df       	rcall	.-366    	; 0xca <spiTransfer>
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	ba 01       	movw	r22, r20
 240:	87 e3       	ldi	r24, 0x37	; 55
 242:	60 df       	rcall	.-320    	; 0x104 <sdCommand>
 244:	7c df       	rcall	.-264    	; 0x13e <sdReadRes1>
 246:	c8 2f       	mov	r28, r24
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	3f df       	rcall	.-386    	; 0xca <spiTransfer>
 24c:	88 b3       	in	r24, 0x18	; 24
 24e:	81 60       	ori	r24, 0x01	; 1
 250:	88 bb       	out	0x18, r24	; 24
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	3a df       	rcall	.-396    	; 0xca <spiTransfer>
 256:	8c 2f       	mov	r24, r28
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <sdSendOpCond>:
 25c:	cf 93       	push	r28
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	34 df       	rcall	.-408    	; 0xca <spiTransfer>
 262:	88 b3       	in	r24, 0x18	; 24
 264:	8e 7f       	andi	r24, 0xFE	; 254
 266:	88 bb       	out	0x18, r24	; 24
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	2f df       	rcall	.-418    	; 0xca <spiTransfer>
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	70 e4       	ldi	r23, 0x40	; 64
 276:	89 e2       	ldi	r24, 0x29	; 41
 278:	45 df       	rcall	.-374    	; 0x104 <sdCommand>
 27a:	61 df       	rcall	.-318    	; 0x13e <sdReadRes1>
 27c:	c8 2f       	mov	r28, r24
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	24 df       	rcall	.-440    	; 0xca <spiTransfer>
 282:	88 b3       	in	r24, 0x18	; 24
 284:	81 60       	ori	r24, 0x01	; 1
 286:	88 bb       	out	0x18, r24	; 24
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	1f df       	rcall	.-450    	; 0xca <spiTransfer>
 28c:	8c 2f       	mov	r24, r28
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <sdInit>:
 292:	ff 92       	push	r15
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	00 d0       	rcall	.+0      	; 0x29e <sdInit+0xc>
 29e:	00 d0       	rcall	.+0      	; 0x2a0 <sdInit+0xe>
 2a0:	1f 92       	push	r1
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	16 df       	rcall	.-468    	; 0xd4 <sdPowerUpSeq>
 2a8:	00 e0       	ldi	r16, 0x00	; 0
 2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <sdInit+0x20>
 2ac:	0f 5f       	subi	r16, 0xFF	; 255
 2ae:	0b 30       	cpi	r16, 0x0B	; 11
 2b0:	50 f5       	brcc	.+84     	; 0x306 <sdInit+0x74>
 2b2:	51 df       	rcall	.-350    	; 0x156 <sdGoIdleState>
 2b4:	18 2f       	mov	r17, r24
 2b6:	89 83       	std	Y+1, r24	; 0x01
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	c1 f7       	brne	.-16     	; 0x2ac <sdInit+0x1a>
 2bc:	ce 01       	movw	r24, r28
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	7a df       	rcall	.-268    	; 0x1b6 <sdSendIfCond>
 2c2:	f9 80       	ldd	r15, Y+1	; 0x01
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	f8 12       	cpse	r15, r24
 2c8:	23 c0       	rjmp	.+70     	; 0x310 <sdInit+0x7e>
 2ca:	8d 81       	ldd	r24, Y+5	; 0x05
 2cc:	8a 3a       	cpi	r24, 0xAA	; 170
 2ce:	e9 f4       	brne	.+58     	; 0x30a <sdInit+0x78>
 2d0:	00 e0       	ldi	r16, 0x00	; 0
 2d2:	05 36       	cpi	r16, 0x65	; 101
 2d4:	e0 f4       	brcc	.+56     	; 0x30e <sdInit+0x7c>
 2d6:	a8 df       	rcall	.-176    	; 0x228 <sdSendApp>
 2d8:	89 83       	std	Y+1, r24	; 0x01
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	10 f4       	brcc	.+4      	; 0x2e2 <sdInit+0x50>
 2de:	be df       	rcall	.-132    	; 0x25c <sdSendOpCond>
 2e0:	89 83       	std	Y+1, r24	; 0x01
 2e2:	8f e3       	ldi	r24, 0x3F	; 63
 2e4:	9c e9       	ldi	r25, 0x9C	; 156
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <sdInit+0x54>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <sdInit+0x5a>
 2ec:	00 00       	nop
 2ee:	0f 5f       	subi	r16, 0xFF	; 255
 2f0:	19 81       	ldd	r17, Y+1	; 0x01
 2f2:	11 11       	cpse	r17, r1
 2f4:	ee cf       	rjmp	.-36     	; 0x2d2 <sdInit+0x40>
 2f6:	ce 01       	movw	r24, r28
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	7a df       	rcall	.-268    	; 0x1f0 <sdReadOcr>
 2fc:	8a 81       	ldd	r24, Y+2	; 0x02
 2fe:	88 23       	and	r24, r24
 300:	3c f0       	brlt	.+14     	; 0x310 <sdInit+0x7e>
 302:	1f 2d       	mov	r17, r15
 304:	05 c0       	rjmp	.+10     	; 0x310 <sdInit+0x7e>
 306:	11 e0       	ldi	r17, 0x01	; 1
 308:	03 c0       	rjmp	.+6      	; 0x310 <sdInit+0x7e>
 30a:	1f 2d       	mov	r17, r15
 30c:	01 c0       	rjmp	.+2      	; 0x310 <sdInit+0x7e>
 30e:	1f 2d       	mov	r17, r15
 310:	81 2f       	mov	r24, r17
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	ff 90       	pop	r15
 326:	08 95       	ret

00000328 <sdReadSingleBlock>:
 328:	4f 92       	push	r4
 32a:	5f 92       	push	r5
 32c:	6f 92       	push	r6
 32e:	7f 92       	push	r7
 330:	af 92       	push	r10
 332:	bf 92       	push	r11
 334:	cf 92       	push	r12
 336:	df 92       	push	r13
 338:	ef 92       	push	r14
 33a:	ff 92       	push	r15
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	2b 01       	movw	r4, r22
 346:	3c 01       	movw	r6, r24
 348:	ea 01       	movw	r28, r20
 34a:	59 01       	movw	r10, r18
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	f9 01       	movw	r30, r18
 350:	80 83       	st	Z, r24
 352:	bb de       	rcall	.-650    	; 0xca <spiTransfer>
 354:	88 b3       	in	r24, 0x18	; 24
 356:	8e 7f       	andi	r24, 0xFE	; 254
 358:	88 bb       	out	0x18, r24	; 24
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	b6 de       	rcall	.-660    	; 0xca <spiTransfer>
 35e:	20 e0       	ldi	r18, 0x00	; 0
 360:	b3 01       	movw	r22, r6
 362:	a2 01       	movw	r20, r4
 364:	81 e1       	ldi	r24, 0x11	; 17
 366:	ce de       	rcall	.-612    	; 0x104 <sdCommand>
 368:	ea de       	rcall	.-556    	; 0x13e <sdReadRes1>
 36a:	c8 2e       	mov	r12, r24
 36c:	ff ef       	ldi	r31, 0xFF	; 255
 36e:	8f 13       	cpse	r24, r31
 370:	08 c0       	rjmp	.+16     	; 0x382 <sdReadSingleBlock+0x5a>
 372:	2a c0       	rjmp	.+84     	; 0x3c8 <sdReadSingleBlock+0xa0>
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	a9 de       	rcall	.-686    	; 0xca <spiTransfer>
 378:	d8 2e       	mov	r13, r24
 37a:	8f ef       	ldi	r24, 0xFF	; 255
 37c:	d8 16       	cp	r13, r24
 37e:	19 f0       	breq	.+6      	; 0x386 <sdReadSingleBlock+0x5e>
 380:	08 c0       	rjmp	.+16     	; 0x392 <sdReadSingleBlock+0x6a>
 382:	00 e0       	ldi	r16, 0x00	; 0
 384:	10 e0       	ldi	r17, 0x00	; 0
 386:	0f 5f       	subi	r16, 0xFF	; 255
 388:	1f 4f       	sbci	r17, 0xFF	; 255
 38a:	0b 31       	cpi	r16, 0x1B	; 27
 38c:	e6 e0       	ldi	r30, 0x06	; 6
 38e:	1e 07       	cpc	r17, r30
 390:	89 f7       	brne	.-30     	; 0x374 <sdReadSingleBlock+0x4c>
 392:	fe ef       	ldi	r31, 0xFE	; 254
 394:	df 12       	cpse	r13, r31
 396:	16 c0       	rjmp	.+44     	; 0x3c4 <sdReadSingleBlock+0x9c>
 398:	0b c0       	rjmp	.+22     	; 0x3b0 <sdReadSingleBlock+0x88>
 39a:	7e 01       	movw	r14, r28
 39c:	8f ef       	ldi	r24, 0xFF	; 255
 39e:	e8 1a       	sub	r14, r24
 3a0:	f8 0a       	sbc	r15, r24
 3a2:	8f ef       	ldi	r24, 0xFF	; 255
 3a4:	92 de       	rcall	.-732    	; 0xca <spiTransfer>
 3a6:	88 83       	st	Y, r24
 3a8:	0f 5f       	subi	r16, 0xFF	; 255
 3aa:	1f 4f       	sbci	r17, 0xFF	; 255
 3ac:	e7 01       	movw	r28, r14
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <sdReadSingleBlock+0x8c>
 3b0:	00 e0       	ldi	r16, 0x00	; 0
 3b2:	10 e0       	ldi	r17, 0x00	; 0
 3b4:	01 15       	cp	r16, r1
 3b6:	e2 e0       	ldi	r30, 0x02	; 2
 3b8:	1e 07       	cpc	r17, r30
 3ba:	78 f3       	brcs	.-34     	; 0x39a <sdReadSingleBlock+0x72>
 3bc:	8f ef       	ldi	r24, 0xFF	; 255
 3be:	85 de       	rcall	.-758    	; 0xca <spiTransfer>
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	83 de       	rcall	.-762    	; 0xca <spiTransfer>
 3c4:	f5 01       	movw	r30, r10
 3c6:	d0 82       	st	Z, r13
 3c8:	8f ef       	ldi	r24, 0xFF	; 255
 3ca:	7f de       	rcall	.-770    	; 0xca <spiTransfer>
 3cc:	88 b3       	in	r24, 0x18	; 24
 3ce:	81 60       	ori	r24, 0x01	; 1
 3d0:	88 bb       	out	0x18, r24	; 24
 3d2:	8f ef       	ldi	r24, 0xFF	; 255
 3d4:	7a de       	rcall	.-780    	; 0xca <spiTransfer>
 3d6:	8c 2d       	mov	r24, r12
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	0f 91       	pop	r16
 3e0:	ff 90       	pop	r15
 3e2:	ef 90       	pop	r14
 3e4:	df 90       	pop	r13
 3e6:	cf 90       	pop	r12
 3e8:	bf 90       	pop	r11
 3ea:	af 90       	pop	r10
 3ec:	7f 90       	pop	r7
 3ee:	6f 90       	pop	r6
 3f0:	5f 90       	pop	r5
 3f2:	4f 90       	pop	r4
 3f4:	08 95       	ret

000003f6 <sdWriteSingleBlock>:
 3f6:	8f 92       	push	r8
 3f8:	9f 92       	push	r9
 3fa:	af 92       	push	r10
 3fc:	bf 92       	push	r11
 3fe:	df 92       	push	r13
 400:	ef 92       	push	r14
 402:	ff 92       	push	r15
 404:	0f 93       	push	r16
 406:	1f 93       	push	r17
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	4b 01       	movw	r8, r22
 40e:	5c 01       	movw	r10, r24
 410:	8a 01       	movw	r16, r20
 412:	79 01       	movw	r14, r18
 414:	8f ef       	ldi	r24, 0xFF	; 255
 416:	f9 01       	movw	r30, r18
 418:	80 83       	st	Z, r24
 41a:	57 de       	rcall	.-850    	; 0xca <spiTransfer>
 41c:	88 b3       	in	r24, 0x18	; 24
 41e:	8e 7f       	andi	r24, 0xFE	; 254
 420:	88 bb       	out	0x18, r24	; 24
 422:	8f ef       	ldi	r24, 0xFF	; 255
 424:	52 de       	rcall	.-860    	; 0xca <spiTransfer>
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	b5 01       	movw	r22, r10
 42a:	a4 01       	movw	r20, r8
 42c:	88 e1       	ldi	r24, 0x18	; 24
 42e:	6a de       	rcall	.-812    	; 0x104 <sdCommand>
 430:	86 de       	rcall	.-756    	; 0x13e <sdReadRes1>
 432:	d8 2e       	mov	r13, r24
 434:	81 11       	cpse	r24, r1
 436:	23 c0       	rjmp	.+70     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 438:	8e ef       	ldi	r24, 0xFE	; 254
 43a:	47 de       	rcall	.-882    	; 0xca <spiTransfer>
 43c:	c0 e0       	ldi	r28, 0x00	; 0
 43e:	d0 e0       	ldi	r29, 0x00	; 0
 440:	06 c0       	rjmp	.+12     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 442:	f8 01       	movw	r30, r16
 444:	ec 0f       	add	r30, r28
 446:	fd 1f       	adc	r31, r29
 448:	80 81       	ld	r24, Z
 44a:	3f de       	rcall	.-898    	; 0xca <spiTransfer>
 44c:	21 96       	adiw	r28, 0x01	; 1
 44e:	c1 15       	cp	r28, r1
 450:	f2 e0       	ldi	r31, 0x02	; 2
 452:	df 07       	cpc	r29, r31
 454:	b0 f3       	brcs	.-20     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 456:	07 c0       	rjmp	.+14     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 458:	9f ef       	ldi	r25, 0xFF	; 255
 45a:	f7 01       	movw	r30, r14
 45c:	90 83       	st	Z, r25
 45e:	8f 71       	andi	r24, 0x1F	; 31
 460:	85 30       	cpi	r24, 0x05	; 5
 462:	69 f4       	brne	.+26     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 464:	05 c0       	rjmp	.+10     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 466:	8f ef       	ldi	r24, 0xFF	; 255
 468:	30 de       	rcall	.-928    	; 0xca <spiTransfer>
 46a:	8f 3f       	cpi	r24, 0xFF	; 255
 46c:	e1 f3       	breq	.-8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 46e:	f4 cf       	rjmp	.-24     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 470:	85 e0       	ldi	r24, 0x05	; 5
 472:	f7 01       	movw	r30, r14
 474:	80 83       	st	Z, r24
 476:	8f ef       	ldi	r24, 0xFF	; 255
 478:	28 de       	rcall	.-944    	; 0xca <spiTransfer>
 47a:	88 23       	and	r24, r24
 47c:	e1 f3       	breq	.-8      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 47e:	8f ef       	ldi	r24, 0xFF	; 255
 480:	24 de       	rcall	.-952    	; 0xca <spiTransfer>
 482:	88 b3       	in	r24, 0x18	; 24
 484:	81 60       	ori	r24, 0x01	; 1
 486:	88 bb       	out	0x18, r24	; 24
 488:	8f ef       	ldi	r24, 0xFF	; 255
 48a:	1f de       	rcall	.-962    	; 0xca <spiTransfer>
 48c:	8d 2d       	mov	r24, r13
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	ff 90       	pop	r15
 498:	ef 90       	pop	r14
 49a:	df 90       	pop	r13
 49c:	bf 90       	pop	r11
 49e:	af 90       	pop	r10
 4a0:	9f 90       	pop	r9
 4a2:	8f 90       	pop	r8
 4a4:	08 95       	ret

000004a6 <sdPrintDataErrToken>:

void sdPrintDataErrToken(uint8_t token)
{
 4a6:	cf 93       	push	r28
 4a8:	c8 2f       	mov	r28, r24
	if(SD_TOKEN_OOR(token))
 4aa:	83 ff       	sbrs	r24, 3
 4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <sdPrintDataErrToken+0xe>
	uartPuts("\tData out of range\n");
 4ae:	82 e9       	ldi	r24, 0x92	; 146
 4b0:	92 e0       	ldi	r25, 0x02	; 2
 4b2:	d7 d0       	rcall	.+430    	; 0x662 <uartPuts>
	if(SD_TOKEN_CECC(token))
 4b4:	c2 ff       	sbrs	r28, 2
 4b6:	03 c0       	rjmp	.+6      	; 0x4be <sdPrintDataErrToken+0x18>
	uartPuts("\tCard ECC failed\n");
 4b8:	86 ea       	ldi	r24, 0xA6	; 166
 4ba:	92 e0       	ldi	r25, 0x02	; 2
 4bc:	d2 d0       	rcall	.+420    	; 0x662 <uartPuts>
	if(SD_TOKEN_CC(token))
 4be:	c1 ff       	sbrs	r28, 1
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <sdPrintDataErrToken+0x22>
	uartPuts("\tCC Error\n");
 4c2:	88 eb       	ldi	r24, 0xB8	; 184
 4c4:	92 e0       	ldi	r25, 0x02	; 2
 4c6:	cd d0       	rcall	.+410    	; 0x662 <uartPuts>
	if(SD_TOKEN_ERROR(token))
 4c8:	c0 ff       	sbrs	r28, 0
	uartPuts("\tError\n");
 4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <sdPrintDataErrToken+0x2c>
 4cc:	83 ec       	ldi	r24, 0xC3	; 195
 4ce:	92 e0       	ldi	r25, 0x02	; 2
 4d0:	c8 d0       	rcall	.+400    	; 0x662 <uartPuts>
}
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <main>:
*************************/
#define F_CPU 16000000UL
#include <util/delay.h>

int main(void)
{
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
 4de:	c1 50       	subi	r28, 0x01	; 1
 4e0:	d4 40       	sbci	r29, 0x04	; 4
 4e2:	0f b6       	in	r0, 0x3f	; 63
 4e4:	f8 94       	cli
 4e6:	de bf       	out	0x3e, r29	; 62
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	cd bf       	out	0x3d, r28	; 61
	uint8_t res[5], sdBufRead[512], sdBufWrite[512], token;
	uint32_t addr = 0x00000200;

	// UART를 초기화 합니다
	const unsigned int baudRate = (F_CPU / 16 / 9600) - 1;
	uartInit(baudRate);
 4ec:	87 e6       	ldi	r24, 0x67	; 103
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	c4 d0       	rcall	.+392    	; 0x67a <uartInit>

	// SPI를 초기화 합니다
	spiInit();
 4f2:	e2 dd       	rcall	.-1084   	; 0xb8 <spiInit>
 4f4:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f6:	81 ee       	ldi	r24, 0xE1	; 225
 4f8:	94 e0       	ldi	r25, 0x04	; 4
 4fa:	21 50       	subi	r18, 0x01	; 1
 4fc:	80 40       	sbci	r24, 0x00	; 0
 4fe:	90 40       	sbci	r25, 0x00	; 0
 500:	e1 f7       	brne	.-8      	; 0x4fa <main+0x24>
 502:	00 c0       	rjmp	.+0      	; 0x504 <main+0x2e>
 504:	00 00       	nop
	
	// SDCard에 안정적인 공급을 위하여 100ms 기다립니다.
	_delay_ms(100);

	// SDCard를 초기화 합니다
	if (sdInit() != SD_SUCCESS)
 506:	c5 de       	rcall	.-630    	; 0x292 <sdInit>
 508:	88 23       	and	r24, r24
 50a:	21 f0       	breq	.+8      	; 0x514 <main+0x3e>
	{
		uartPuts("Error initializaing SD CARD\n");
 50c:	8b ec       	ldi	r24, 0xCB	; 203
 50e:	92 e0       	ldi	r25, 0x02	; 2
 510:	a8 d0       	rcall	.+336    	; 0x662 <uartPuts>
 512:	ff cf       	rjmp	.-2      	; 0x512 <main+0x3c>
		while (1)
		;
	}
	else
	{
		uartPuts("SD Card initialized\n");
 514:	88 ee       	ldi	r24, 0xE8	; 232
 516:	92 e0       	ldi	r25, 0x02	; 2
 518:	a4 d0       	rcall	.+328    	; 0x662 <uartPuts>
 51a:	9e 01       	movw	r18, r28
		
		/* SDcard Read */
		// Sector 0을 읽습니다
		res[0] = sdReadSingleBlock(addr, sdBufRead, &token);
 51c:	2f 5f       	subi	r18, 0xFF	; 255
 51e:	3b 4f       	sbci	r19, 0xFB	; 251
 520:	ae 01       	movw	r20, r28
 522:	4f 5f       	subi	r20, 0xFF	; 255
 524:	5f 4f       	sbci	r21, 0xFF	; 255
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	72 e0       	ldi	r23, 0x02	; 2
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	fc de       	rcall	.-520    	; 0x328 <sdReadSingleBlock>
 530:	82 30       	cpi	r24, 0x02	; 2

		// Response를 출력합니다
		if (SD_R1_NO_ERROR(res[0]) && (token == 0xFE))
 532:	38 f5       	brcc	.+78     	; 0x582 <main+0xac>
 534:	cf 5f       	subi	r28, 0xFF	; 255
 536:	db 4f       	sbci	r29, 0xFB	; 251
 538:	88 81       	ld	r24, Y
 53a:	c1 50       	subi	r28, 0x01	; 1
 53c:	d4 40       	sbci	r29, 0x04	; 4
 53e:	8e 3f       	cpi	r24, 0xFE	; 254
 540:	01 f5       	brne	.+64     	; 0x582 <main+0xac>
 542:	13 c0       	rjmp	.+38     	; 0x56a <main+0x94>
 544:	c8 01       	movw	r24, r16
		{
			for (uint16_t i = 0; i < 512; i++)
			{
				if (i % 32 == 0)
 546:	8f 71       	andi	r24, 0x1F	; 31
 548:	99 27       	eor	r25, r25
 54a:	89 2b       	or	r24, r25
 54c:	19 f4       	brne	.+6      	; 0x554 <main+0x7e>
				uartPuts("\n");
 54e:	8e e3       	ldi	r24, 0x3E	; 62
 550:	93 e0       	ldi	r25, 0x03	; 3
 552:	87 d0       	rcall	.+270    	; 0x662 <uartPuts>
 554:	e1 e0       	ldi	r30, 0x01	; 1
				uartPutHex8(sdBufRead[i]);
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	ec 0f       	add	r30, r28
 55a:	fd 1f       	adc	r31, r29
 55c:	e0 0f       	add	r30, r16
 55e:	f1 1f       	adc	r31, r17
 560:	80 81       	ld	r24, Z
 562:	98 d0       	rcall	.+304    	; 0x694 <uartPutHex8>
 564:	0f 5f       	subi	r16, 0xFF	; 255
		res[0] = sdReadSingleBlock(addr, sdBufRead, &token);

		// Response를 출력합니다
		if (SD_R1_NO_ERROR(res[0]) && (token == 0xFE))
		{
			for (uint16_t i = 0; i < 512; i++)
 566:	1f 4f       	sbci	r17, 0xFF	; 255
 568:	02 c0       	rjmp	.+4      	; 0x56e <main+0x98>
 56a:	00 e0       	ldi	r16, 0x00	; 0
 56c:	10 e0       	ldi	r17, 0x00	; 0
 56e:	01 15       	cp	r16, r1
 570:	22 e0       	ldi	r18, 0x02	; 2
 572:	12 07       	cpc	r17, r18
 574:	38 f3       	brcs	.-50     	; 0x544 <main+0x6e>
			{
				if (i % 32 == 0)
				uartPuts("\n");
				uartPutHex8(sdBufRead[i]);
			}
			uartPuts("\n");
 576:	8e e3       	ldi	r24, 0x3E	; 62
 578:	93 e0       	ldi	r25, 0x03	; 3
 57a:	73 d0       	rcall	.+230    	; 0x662 <uartPuts>
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0d c0       	rjmp	.+26     	; 0x59c <main+0xc6>
		}
		else
		{
			uartPuts("Error reading sector\n");
 582:	8d ef       	ldi	r24, 0xFD	; 253
 584:	92 e0       	ldi	r25, 0x02	; 2
 586:	6d d0       	rcall	.+218    	; 0x662 <uartPuts>
 588:	f9 cf       	rjmp	.-14     	; 0x57c <main+0xa6>
 58a:	e1 e0       	ldi	r30, 0x01	; 1
		}
		
		
		/* SDcard Write */
		// 0x55로 버퍼를 채웁니다.
		for(uint16_t i=0; i<512; i++) sdBufWrite[i] = 0x55;
 58c:	f2 e0       	ldi	r31, 0x02	; 2
 58e:	ec 0f       	add	r30, r28
 590:	fd 1f       	adc	r31, r29
 592:	e8 0f       	add	r30, r24
 594:	f9 1f       	adc	r31, r25
 596:	25 e5       	ldi	r18, 0x55	; 85
 598:	20 83       	st	Z, r18
 59a:	01 96       	adiw	r24, 0x01	; 1
 59c:	81 15       	cp	r24, r1
 59e:	22 e0       	ldi	r18, 0x02	; 2
 5a0:	92 07       	cpc	r25, r18
 5a2:	98 f3       	brcs	.-26     	; 0x58a <main+0xb4>
 5a4:	9e 01       	movw	r18, r28
		
		// 주소 0x100에 0x55를 기록합니다.
		res[0] = sdWriteSingleBlock(addr, sdBufWrite, &token);
 5a6:	2f 5f       	subi	r18, 0xFF	; 255
 5a8:	3b 4f       	sbci	r19, 0xFB	; 251
 5aa:	ae 01       	movw	r20, r28
 5ac:	4f 5f       	subi	r20, 0xFF	; 255
 5ae:	5d 4f       	sbci	r21, 0xFD	; 253
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	72 e0       	ldi	r23, 0x02	; 2
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	1e df       	rcall	.-452    	; 0x3f6 <sdWriteSingleBlock>
		
		
		uartPuts("\n\nAFTER WRITING TO SDCARD on 0x01 value...\n\n");
 5ba:	83 e1       	ldi	r24, 0x13	; 19
 5bc:	93 e0       	ldi	r25, 0x03	; 3
 5be:	51 d0       	rcall	.+162    	; 0x662 <uartPuts>
		/* SDcard Read */
		// Sector 0을 읽습니다
		res[0] = sdReadSingleBlock(addr, sdBufRead, &token);
 5c0:	9e 01       	movw	r18, r28
 5c2:	2f 5f       	subi	r18, 0xFF	; 255
 5c4:	3b 4f       	sbci	r19, 0xFB	; 251
 5c6:	ae 01       	movw	r20, r28
 5c8:	4f 5f       	subi	r20, 0xFF	; 255
 5ca:	5f 4f       	sbci	r21, 0xFF	; 255
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	72 e0       	ldi	r23, 0x02	; 2
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	a9 de       	rcall	.-686    	; 0x328 <sdReadSingleBlock>
 5d6:	82 30       	cpi	r24, 0x02	; 2

		// Response를 출력합니다
		if (SD_R1_NO_ERROR(res[0]) && (token == 0xFE))
 5d8:	28 f5       	brcc	.+74     	; 0x624 <main+0x14e>
 5da:	cf 5f       	subi	r28, 0xFF	; 255
 5dc:	db 4f       	sbci	r29, 0xFB	; 251
 5de:	88 81       	ld	r24, Y
 5e0:	c1 50       	subi	r28, 0x01	; 1
 5e2:	d4 40       	sbci	r29, 0x04	; 4
 5e4:	8e 3f       	cpi	r24, 0xFE	; 254
 5e6:	f1 f4       	brne	.+60     	; 0x624 <main+0x14e>
 5e8:	13 c0       	rjmp	.+38     	; 0x610 <main+0x13a>
		{
			for (uint16_t i = 0; i < 512; i++)
			{
				if (i % 32 == 0)
 5ea:	c8 01       	movw	r24, r16
 5ec:	8f 71       	andi	r24, 0x1F	; 31
 5ee:	99 27       	eor	r25, r25
 5f0:	89 2b       	or	r24, r25
				uartPuts("\n");
 5f2:	19 f4       	brne	.+6      	; 0x5fa <main+0x124>
 5f4:	8e e3       	ldi	r24, 0x3E	; 62
 5f6:	93 e0       	ldi	r25, 0x03	; 3
 5f8:	34 d0       	rcall	.+104    	; 0x662 <uartPuts>
				uartPutHex8(sdBufRead[i]);
 5fa:	e1 e0       	ldi	r30, 0x01	; 1
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	ec 0f       	add	r30, r28
 600:	fd 1f       	adc	r31, r29
 602:	e0 0f       	add	r30, r16
 604:	f1 1f       	adc	r31, r17
 606:	80 81       	ld	r24, Z
 608:	45 d0       	rcall	.+138    	; 0x694 <uartPutHex8>
		res[0] = sdReadSingleBlock(addr, sdBufRead, &token);

		// Response를 출력합니다
		if (SD_R1_NO_ERROR(res[0]) && (token == 0xFE))
		{
			for (uint16_t i = 0; i < 512; i++)
 60a:	0f 5f       	subi	r16, 0xFF	; 255
 60c:	1f 4f       	sbci	r17, 0xFF	; 255
 60e:	02 c0       	rjmp	.+4      	; 0x614 <main+0x13e>
 610:	00 e0       	ldi	r16, 0x00	; 0
 612:	10 e0       	ldi	r17, 0x00	; 0
 614:	01 15       	cp	r16, r1
 616:	82 e0       	ldi	r24, 0x02	; 2
 618:	18 07       	cpc	r17, r24
			{
				if (i % 32 == 0)
				uartPuts("\n");
				uartPutHex8(sdBufRead[i]);
			}
			uartPuts("\n");
 61a:	38 f3       	brcs	.-50     	; 0x5ea <main+0x114>
 61c:	8e e3       	ldi	r24, 0x3E	; 62
 61e:	93 e0       	ldi	r25, 0x03	; 3
 620:	20 d0       	rcall	.+64     	; 0x662 <uartPuts>
		}
		else
		{
			uartPuts("Error reading sector\n");
 622:	03 c0       	rjmp	.+6      	; 0x62a <main+0x154>
 624:	8d ef       	ldi	r24, 0xFD	; 253
 626:	92 e0       	ldi	r25, 0x02	; 2
		}

		// 오류 토큰을 수신했을때
		if(!(token & 0xF0))
 628:	1c d0       	rcall	.+56     	; 0x662 <uartPuts>
 62a:	cf 5f       	subi	r28, 0xFF	; 255
 62c:	db 4f       	sbci	r29, 0xFB	; 251
 62e:	88 81       	ld	r24, Y
 630:	c1 50       	subi	r28, 0x01	; 1
 632:	d4 40       	sbci	r29, 0x04	; 4
 634:	98 2f       	mov	r25, r24
		{
			uartPuts("Error token:\n");
 636:	90 7f       	andi	r25, 0xF0	; 240
 638:	51 f4       	brne	.+20     	; 0x64e <main+0x178>
 63a:	80 e4       	ldi	r24, 0x40	; 64
 63c:	93 e0       	ldi	r25, 0x03	; 3
			sdPrintDataErrToken(token);
 63e:	11 d0       	rcall	.+34     	; 0x662 <uartPuts>
 640:	cf 5f       	subi	r28, 0xFF	; 255
 642:	db 4f       	sbci	r29, 0xFB	; 251
 644:	88 81       	ld	r24, Y
 646:	c1 50       	subi	r28, 0x01	; 1
 648:	d4 40       	sbci	r29, 0x04	; 4
 64a:	2d df       	rcall	.-422    	; 0x4a6 <sdPrintDataErrToken>
 64c:	05 c0       	rjmp	.+10     	; 0x658 <main+0x182>
		}
		else if(token == 0xFF)
 64e:	8f 3f       	cpi	r24, 0xFF	; 255
 650:	19 f4       	brne	.+6      	; 0x658 <main+0x182>
		{
			uartPuts("Timeout\n");
 652:	8e e4       	ldi	r24, 0x4E	; 78
 654:	93 e0       	ldi	r25, 0x03	; 3
 656:	05 d0       	rcall	.+10     	; 0x662 <uartPuts>
 658:	ff cf       	rjmp	.-2      	; 0x658 <main+0x182>

0000065a <uartPut>:
}

void uartPut(unsigned char data)
{
	// 전송 버퍼가 비어 있을 때까지 기다립니다
	while (!(UCSR0A & (1 << UDRE0)))
 65a:	5d 9b       	sbis	0x0b, 5	; 11
 65c:	fe cf       	rjmp	.-4      	; 0x65a <uartPut>
	;

	// 데이터를 UDR(전송 레지스터)에 입력
	UDR0 = data;
 65e:	8c b9       	out	0x0c, r24	; 12
 660:	08 95       	ret

00000662 <uartPuts>:
}

void uartPuts(char *s)
{
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	ec 01       	movw	r28, r24
	// 문자열의 끝을 알리는 NULL이 나올때까지 단일 문자를 전송합니다
	while (*s > 0)
 668:	02 c0       	rjmp	.+4      	; 0x66e <uartPuts+0xc>
	uartPut(*s++);
 66a:	21 96       	adiw	r28, 0x01	; 1
 66c:	f6 df       	rcall	.-20     	; 0x65a <uartPut>
}

void uartPuts(char *s)
{
	// 문자열의 끝을 알리는 NULL이 나올때까지 단일 문자를 전송합니다
	while (*s > 0)
 66e:	88 81       	ld	r24, Y
 670:	81 11       	cpse	r24, r1
 672:	fb cf       	rjmp	.-10     	; 0x66a <uartPuts+0x8>
	uartPut(*s++);
}
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	08 95       	ret

0000067a <uartInit>:
#include "uart.h"

void uartInit(uint16_t ubrr)
{
	// UBRR에 전송 속도(Buadrate)를 설정
	UBRR0L = (uint8_t)(ubrr & 0xFF);
 67a:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (uint8_t)(ubrr >> 8);
 67c:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>

	// UART 송신기와 수신기 활성화
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 680:	8a b1       	in	r24, 0x0a	; 10
 682:	88 61       	ori	r24, 0x18	; 24
 684:	8a b9       	out	0x0a, r24	; 10
	uartPuts("\n\r");
 686:	8f e6       	ldi	r24, 0x6F	; 111
 688:	93 e0       	ldi	r25, 0x03	; 3
 68a:	eb df       	rcall	.-42     	; 0x662 <uartPuts>
	uartPuts("[INFO] UART initialized!\n\r");
 68c:	87 e5       	ldi	r24, 0x57	; 87
 68e:	93 e0       	ldi	r25, 0x03	; 3
 690:	e8 cf       	rjmp	.-48     	; 0x662 <uartPuts>
 692:	08 95       	ret

00000694 <uartPutHex8>:
	while (*s > 0)
	uartPut(*s++);
}

void uartPutHex8(uint8_t val)
{
 694:	cf 93       	push	r28
	// 입력 값에서 상위 및 하위 니블 추출
	uint8_t upperNibble = (val & 0xF0) >> 4;
 696:	28 2f       	mov	r18, r24
 698:	22 95       	swap	r18
 69a:	2f 70       	andi	r18, 0x0F	; 15
	uint8_t lowerNibble = val & 0x0F;
 69c:	98 2f       	mov	r25, r24
 69e:	9f 70       	andi	r25, 0x0F	; 15

	// 니블을 ASCII 16진수로 변환
	upperNibble += upperNibble > 9 ? 'A' - 10 : '0';
 6a0:	2a 30       	cpi	r18, 0x0A	; 10
 6a2:	10 f0       	brcs	.+4      	; 0x6a8 <uartPutHex8+0x14>
 6a4:	87 e3       	ldi	r24, 0x37	; 55
 6a6:	01 c0       	rjmp	.+2      	; 0x6aa <uartPutHex8+0x16>
 6a8:	80 e3       	ldi	r24, 0x30	; 48
 6aa:	82 0f       	add	r24, r18
	lowerNibble += lowerNibble > 9 ? 'A' - 10 : '0';
 6ac:	9a 30       	cpi	r25, 0x0A	; 10
 6ae:	10 f0       	brcs	.+4      	; 0x6b4 <uartPutHex8+0x20>
 6b0:	c7 e3       	ldi	r28, 0x37	; 55
 6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <uartPutHex8+0x22>
 6b4:	c0 e3       	ldi	r28, 0x30	; 48
 6b6:	c9 0f       	add	r28, r25

	// 문자를 출력
	uartPut(upperNibble);
 6b8:	d0 df       	rcall	.-96     	; 0x65a <uartPut>
	uartPut(lowerNibble);
 6ba:	8c 2f       	mov	r24, r28
 6bc:	ce df       	rcall	.-100    	; 0x65a <uartPut>
}
 6be:	cf 91       	pop	r28
 6c0:	08 95       	ret

000006c2 <_exit>:
 6c2:	f8 94       	cli

000006c4 <__stop_program>:
 6c4:	ff cf       	rjmp	.-2      	; 0x6c4 <__stop_program>
